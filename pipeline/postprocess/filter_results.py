import json
import argparse
from pathlib import Path

def filter_cases_with_na_rerank(input_file: Path, output_file: Path):
    """
    Reads a JSON report, filters out cases with any 'N/A' reranking results,
    and saves the clean data to a new file.
    'N/A' is represented by an empty list in the reranked_papers_per_keyword value.
    """
    print(f"Loading data from: {input_file}")
    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        print(f"Error: Could not read or parse the input file. {e}")
        return

    all_cases = data.get("all_processed_reports", [])
    if not all_cases:
        print("No cases found in the report.")
        return

    print(f"Loaded {len(all_cases)} total cases.")

    filtered_cases = []
    for case in all_cases:
        is_valid = True
        rerank_results = case.get("evidence_reranked_papers")

        if rerank_results is None or not isinstance(rerank_results, dict) or not rerank_results:
            # 리랭킹 결과 필드가 없거나, 비어있으면 유효하지 않음
            is_valid = False
        else:
            for paper_list in rerank_results.values():
                # 키워드에 대한 논문 리스트가 비어있으면 'N/A'에 해당
                if not paper_list:
                    is_valid = False
                    break

        if is_valid:
            filtered_cases.append(case)

    print(f"Found {len(filtered_cases)} valid cases without any 'N/A' in reranking.")

    data["all_processed_reports"] = filtered_cases
    
    output_file.parent.mkdir(parents=True, exist_ok=True)

    print(f"Saving filtered results to: {output_file}")
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)
    
    print("Filtering complete.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Filter out cases with N/A reranking results from the final JSON report."
    )
    parser.add_argument(
        "--input_file",
        type=str,
        help="Path to the input JSON file generated by the pipeline."
    )
    parser.add_argument(
        "--output_file",
        type=str,
        help="Path to save the filtered output JSON file."
    )
    args = parser.parse_args()

    filter_cases_with_na_rerank(Path(args.input_file), Path(args.output_file))